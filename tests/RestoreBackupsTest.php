<?php
/**
 * Created by PhpStorm.
 * User: Thomas Whiston
 * Date: 06/01/2016
 * Time: 16:55
 */

namespace twhiston\DashXi\tests;

use twhiston\DashXi\Commands;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Tester\CommandTester;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Finder\Finder;


/**
 * Class CleanBackupsTest
 * @package twhiston\DashXi\tests
 */
class RestoreBackupsTest extends \PHPUnit_Framework_TestCase {

  /** @var  Filesystem */
  private $fs;

  /**
   * Make a copy of the database we are replacing so we can restore it after
   */
  protected function setUp(){
    //Copy some files into our cleaning directory
    $this->fs = new Filesystem();
    $d = __DIR__.'/data/restore/';
    $s = 'library.dash';
    $this->fs->copy($d.$s, $d.'library.dash.temp');

  }

  /**
   * restore the original
   */
  protected function tearDown() {
    parent::tearDown(); // TODO: Change the autogenerated stub
    $d = __DIR__.'/data/restore/';
    $s = 'library.dash';
    $this->fs->remove($d.$s);
    $this->fs->copy($d.'library.dash.temp',$d.$s );
    $this->fs->remove($d.'library.dash.temp');
  }

  /**
   * Test the argument correctness checking
   */
  public function testRestoreArguments(){

    $application = new Application();
    $application->add(new Commands\RestoreBackup());
    $command = $application->find('backup:restore');
    $commandTester = new CommandTester($command);

    $s = 'hsnehoenahss/sssaassaadddaammas/';
    $arguments = array(
      'command' =>  $command->getName(),
      'dbpath'    => $s,
      'backup'  => 'brasonhaseonashneohses'
    );
    $commandTester->execute($arguments);

    $disp = $commandTester->getDisplay();
    $this->assertRegExp('/Cannot Find DB path/',$disp);

    $s = __DIR__.'data/restore';
    $arguments = array(
      'command' =>  $command->getName(),
      'dbpath'    => $s,
      'backup'  => 'brasonhaseonashneohses'
    );
    $commandTester->execute($arguments);

    $disp = $commandTester->getDisplay();
    $this->assertRegExp('/Library path must end with \//',$disp);

    $s = __DIR__.'/data/restore/';
    $arguments = array(
      'command' =>  $command->getName(),
      'dbpath'    => $s,
      'backup'  => 'brasonhaseonashneohses'
    );
    $commandTester->execute($arguments);

    $disp = $commandTester->getDisplay();
    $this->assertRegExp('/Cannot Find Backup/',$disp);


  }


  /**
   * Test the actual restoration process in a sandbox folder
   */
  public function testRestore(){

    $application = new Application();
    $application->add(new Commands\RestoreBackup());
    $command = $application->find('backup:restore');
    $commandTester = new CommandTester($command);

    //Working
    $s = __DIR__.'/data/restore/';
    $b = __DIR__.'/data/restore/library.dash.backup.1452166466';
    $arguments = array(
      'command' =>  $command->getName(),
      'dbpath'    => $s,
      'backup'  => $b
    );

    $ssize = filesize($s.'library.dash');
    $commandTester->execute($arguments);
    $rsize = filesize($s.'library.dash');

    //Just assert the file size is no longer 0 and the import is bigger than the old size, which we know to be true by our setup
    $this->assertRegExp('/Restored backup/',$commandTester->getDisplay());
    $this->assertNotEquals(0,$rsize);
    $this->assertGreaterThan($ssize,$rsize);

  }

}
